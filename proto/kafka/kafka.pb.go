// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v4.25.1
// source: kafka.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FeedbackAnalysisCreate struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	FeedbackID        string                 `protobuf:"bytes,1,opt,name=FeedbackID,proto3" json:"FeedbackID,omitempty"`
	FeedbackSource    string                 `protobuf:"bytes,2,opt,name=FeedbackSource,proto3" json:"FeedbackSource,omitempty"`
	Text              string                 `protobuf:"bytes,3,opt,name=Text,proto3" json:"Text,omitempty"`
	FeedbackTimestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=FeedbackTimestamp,proto3" json:"FeedbackTimestamp,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *FeedbackAnalysisCreate) Reset() {
	*x = FeedbackAnalysisCreate{}
	mi := &file_kafka_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeedbackAnalysisCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedbackAnalysisCreate) ProtoMessage() {}

func (x *FeedbackAnalysisCreate) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedbackAnalysisCreate.ProtoReflect.Descriptor instead.
func (*FeedbackAnalysisCreate) Descriptor() ([]byte, []int) {
	return file_kafka_proto_rawDescGZIP(), []int{0}
}

func (x *FeedbackAnalysisCreate) GetFeedbackID() string {
	if x != nil {
		return x.FeedbackID
	}
	return ""
}

func (x *FeedbackAnalysisCreate) GetFeedbackSource() string {
	if x != nil {
		return x.FeedbackSource
	}
	return ""
}

func (x *FeedbackAnalysisCreate) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *FeedbackAnalysisCreate) GetFeedbackTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.FeedbackTimestamp
	}
	return nil
}

type FeedbackAnalysisCreated struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	FeedbackID        string                 `protobuf:"bytes,1,opt,name=FeedbackID,proto3" json:"FeedbackID,omitempty"`
	FeedbackSource    string                 `protobuf:"bytes,2,opt,name=FeedbackSource,proto3" json:"FeedbackSource,omitempty"`
	Text              string                 `protobuf:"bytes,3,opt,name=Text,proto3" json:"Text,omitempty"`
	FeedbackTimestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=FeedbackTimestamp,proto3" json:"FeedbackTimestamp,omitempty"`
	Keywords          []string               `protobuf:"bytes,5,rep,name=Keywords,proto3" json:"Keywords,omitempty"`
	Sentiment         string                 `protobuf:"bytes,6,opt,name=Sentiment,proto3" json:"Sentiment,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *FeedbackAnalysisCreated) Reset() {
	*x = FeedbackAnalysisCreated{}
	mi := &file_kafka_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeedbackAnalysisCreated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedbackAnalysisCreated) ProtoMessage() {}

func (x *FeedbackAnalysisCreated) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedbackAnalysisCreated.ProtoReflect.Descriptor instead.
func (*FeedbackAnalysisCreated) Descriptor() ([]byte, []int) {
	return file_kafka_proto_rawDescGZIP(), []int{1}
}

func (x *FeedbackAnalysisCreated) GetFeedbackID() string {
	if x != nil {
		return x.FeedbackID
	}
	return ""
}

func (x *FeedbackAnalysisCreated) GetFeedbackSource() string {
	if x != nil {
		return x.FeedbackSource
	}
	return ""
}

func (x *FeedbackAnalysisCreated) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *FeedbackAnalysisCreated) GetFeedbackTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.FeedbackTimestamp
	}
	return nil
}

func (x *FeedbackAnalysisCreated) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *FeedbackAnalysisCreated) GetSentiment() string {
	if x != nil {
		return x.Sentiment
	}
	return ""
}

type Feedback struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	FeedbackID        string                 `protobuf:"bytes,1,opt,name=FeedbackID,proto3" json:"FeedbackID,omitempty"`
	FeedbackSource    string                 `protobuf:"bytes,2,opt,name=FeedbackSource,proto3" json:"FeedbackSource,omitempty"`
	Text              string                 `protobuf:"bytes,3,opt,name=Text,proto3" json:"Text,omitempty"`
	FeedbackTimestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=FeedbackTimestamp,proto3" json:"FeedbackTimestamp,omitempty"`
	Keywords          []string               `protobuf:"bytes,5,rep,name=Keywords,proto3" json:"Keywords,omitempty"`
	Sentiment         string                 `protobuf:"bytes,6,opt,name=Sentiment,proto3" json:"Sentiment,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Feedback) Reset() {
	*x = Feedback{}
	mi := &file_kafka_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Feedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Feedback) ProtoMessage() {}

func (x *Feedback) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Feedback.ProtoReflect.Descriptor instead.
func (*Feedback) Descriptor() ([]byte, []int) {
	return file_kafka_proto_rawDescGZIP(), []int{2}
}

func (x *Feedback) GetFeedbackID() string {
	if x != nil {
		return x.FeedbackID
	}
	return ""
}

func (x *Feedback) GetFeedbackSource() string {
	if x != nil {
		return x.FeedbackSource
	}
	return ""
}

func (x *Feedback) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Feedback) GetFeedbackTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.FeedbackTimestamp
	}
	return nil
}

func (x *Feedback) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *Feedback) GetSentiment() string {
	if x != nil {
		return x.Sentiment
	}
	return ""
}

type FeedbackCreated struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Feedback      *Feedback              `protobuf:"bytes,1,opt,name=Feedback,proto3" json:"Feedback,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FeedbackCreated) Reset() {
	*x = FeedbackCreated{}
	mi := &file_kafka_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeedbackCreated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedbackCreated) ProtoMessage() {}

func (x *FeedbackCreated) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedbackCreated.ProtoReflect.Descriptor instead.
func (*FeedbackCreated) Descriptor() ([]byte, []int) {
	return file_kafka_proto_rawDescGZIP(), []int{3}
}

func (x *FeedbackCreated) GetFeedback() *Feedback {
	if x != nil {
		return x.Feedback
	}
	return nil
}

var File_kafka_proto protoreflect.FileDescriptor

const file_kafka_proto_rawDesc = "" +
	"\n" +
	"\vkafka.proto\x12\rkafkaMessages\x1a\x1fgoogle/protobuf/timestamp.proto\"\xbe\x01\n" +
	"\x16FeedbackAnalysisCreate\x12\x1e\n" +
	"\n" +
	"FeedbackID\x18\x01 \x01(\tR\n" +
	"FeedbackID\x12&\n" +
	"\x0eFeedbackSource\x18\x02 \x01(\tR\x0eFeedbackSource\x12\x12\n" +
	"\x04Text\x18\x03 \x01(\tR\x04Text\x12H\n" +
	"\x11FeedbackTimestamp\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\x11FeedbackTimestamp\"\xf9\x01\n" +
	"\x17FeedbackAnalysisCreated\x12\x1e\n" +
	"\n" +
	"FeedbackID\x18\x01 \x01(\tR\n" +
	"FeedbackID\x12&\n" +
	"\x0eFeedbackSource\x18\x02 \x01(\tR\x0eFeedbackSource\x12\x12\n" +
	"\x04Text\x18\x03 \x01(\tR\x04Text\x12H\n" +
	"\x11FeedbackTimestamp\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\x11FeedbackTimestamp\x12\x1a\n" +
	"\bKeywords\x18\x05 \x03(\tR\bKeywords\x12\x1c\n" +
	"\tSentiment\x18\x06 \x01(\tR\tSentiment\"\xea\x01\n" +
	"\bFeedback\x12\x1e\n" +
	"\n" +
	"FeedbackID\x18\x01 \x01(\tR\n" +
	"FeedbackID\x12&\n" +
	"\x0eFeedbackSource\x18\x02 \x01(\tR\x0eFeedbackSource\x12\x12\n" +
	"\x04Text\x18\x03 \x01(\tR\x04Text\x12H\n" +
	"\x11FeedbackTimestamp\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\x11FeedbackTimestamp\x12\x1a\n" +
	"\bKeywords\x18\x05 \x03(\tR\bKeywords\x12\x1c\n" +
	"\tSentiment\x18\x06 \x01(\tR\tSentiment\"F\n" +
	"\x0fFeedbackCreated\x123\n" +
	"\bFeedback\x18\x01 \x01(\v2\x17.kafkaMessages.FeedbackR\bFeedbackB\x04Z\x02./b\x06proto3"

var (
	file_kafka_proto_rawDescOnce sync.Once
	file_kafka_proto_rawDescData []byte
)

func file_kafka_proto_rawDescGZIP() []byte {
	file_kafka_proto_rawDescOnce.Do(func() {
		file_kafka_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_kafka_proto_rawDesc), len(file_kafka_proto_rawDesc)))
	})
	return file_kafka_proto_rawDescData
}

var file_kafka_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_kafka_proto_goTypes = []any{
	(*FeedbackAnalysisCreate)(nil),  // 0: kafkaMessages.FeedbackAnalysisCreate
	(*FeedbackAnalysisCreated)(nil), // 1: kafkaMessages.FeedbackAnalysisCreated
	(*Feedback)(nil),                // 2: kafkaMessages.Feedback
	(*FeedbackCreated)(nil),         // 3: kafkaMessages.FeedbackCreated
	(*timestamppb.Timestamp)(nil),   // 4: google.protobuf.Timestamp
}
var file_kafka_proto_depIdxs = []int32{
	4, // 0: kafkaMessages.FeedbackAnalysisCreate.FeedbackTimestamp:type_name -> google.protobuf.Timestamp
	4, // 1: kafkaMessages.FeedbackAnalysisCreated.FeedbackTimestamp:type_name -> google.protobuf.Timestamp
	4, // 2: kafkaMessages.Feedback.FeedbackTimestamp:type_name -> google.protobuf.Timestamp
	2, // 3: kafkaMessages.FeedbackCreated.Feedback:type_name -> kafkaMessages.Feedback
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_kafka_proto_init() }
func file_kafka_proto_init() {
	if File_kafka_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_kafka_proto_rawDesc), len(file_kafka_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kafka_proto_goTypes,
		DependencyIndexes: file_kafka_proto_depIdxs,
		MessageInfos:      file_kafka_proto_msgTypes,
	}.Build()
	File_kafka_proto = out.File
	file_kafka_proto_goTypes = nil
	file_kafka_proto_depIdxs = nil
}
