// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: feedback_reader.proto

package readerService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FeedbackReader_CreateFeedback_FullMethodName = "/readerService.FeedbackReader/CreateFeedback"
	FeedbackReader_GetFeedback_FullMethodName    = "/readerService.FeedbackReader/GetFeedback"
)

// FeedbackReaderClient is the client API for FeedbackReader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedbackReaderClient interface {
	CreateFeedback(ctx context.Context, in *CreateFeedbackReq, opts ...grpc.CallOption) (*CreateFeedbackRes, error)
	GetFeedback(ctx context.Context, in *GetFeedbackByIdReq, opts ...grpc.CallOption) (*GetFeedbackByIdRes, error)
}

type feedbackReaderClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedbackReaderClient(cc grpc.ClientConnInterface) FeedbackReaderClient {
	return &feedbackReaderClient{cc}
}

func (c *feedbackReaderClient) CreateFeedback(ctx context.Context, in *CreateFeedbackReq, opts ...grpc.CallOption) (*CreateFeedbackRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFeedbackRes)
	err := c.cc.Invoke(ctx, FeedbackReader_CreateFeedback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackReaderClient) GetFeedback(ctx context.Context, in *GetFeedbackByIdReq, opts ...grpc.CallOption) (*GetFeedbackByIdRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFeedbackByIdRes)
	err := c.cc.Invoke(ctx, FeedbackReader_GetFeedback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedbackReaderServer is the server API for FeedbackReader service.
// All implementations should embed UnimplementedFeedbackReaderServer
// for forward compatibility.
type FeedbackReaderServer interface {
	CreateFeedback(context.Context, *CreateFeedbackReq) (*CreateFeedbackRes, error)
	GetFeedback(context.Context, *GetFeedbackByIdReq) (*GetFeedbackByIdRes, error)
}

// UnimplementedFeedbackReaderServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFeedbackReaderServer struct{}

func (UnimplementedFeedbackReaderServer) CreateFeedback(context.Context, *CreateFeedbackReq) (*CreateFeedbackRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeedback not implemented")
}
func (UnimplementedFeedbackReaderServer) GetFeedback(context.Context, *GetFeedbackByIdReq) (*GetFeedbackByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeedback not implemented")
}
func (UnimplementedFeedbackReaderServer) testEmbeddedByValue() {}

// UnsafeFeedbackReaderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedbackReaderServer will
// result in compilation errors.
type UnsafeFeedbackReaderServer interface {
	mustEmbedUnimplementedFeedbackReaderServer()
}

func RegisterFeedbackReaderServer(s grpc.ServiceRegistrar, srv FeedbackReaderServer) {
	// If the following call pancis, it indicates UnimplementedFeedbackReaderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FeedbackReader_ServiceDesc, srv)
}

func _FeedbackReader_CreateFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeedbackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackReaderServer).CreateFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedbackReader_CreateFeedback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackReaderServer).CreateFeedback(ctx, req.(*CreateFeedbackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedbackReader_GetFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeedbackByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackReaderServer).GetFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedbackReader_GetFeedback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackReaderServer).GetFeedback(ctx, req.(*GetFeedbackByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FeedbackReader_ServiceDesc is the grpc.ServiceDesc for FeedbackReader service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeedbackReader_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "readerService.FeedbackReader",
	HandlerType: (*FeedbackReaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFeedback",
			Handler:    _FeedbackReader_CreateFeedback_Handler,
		},
		{
			MethodName: "GetFeedback",
			Handler:    _FeedbackReader_GetFeedback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feedback_reader.proto",
}
